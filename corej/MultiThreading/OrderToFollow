ThreadBasics
Task
RaceCondition
DeadLock
Practice





Concurrent Vs Parallel execution
Thread Vs Process
Thread states
Thread types
ways to create thread

Dead Lock
Race condition

Ways to avoid lock and deadlocks ( Mutex mutual exclusion)
Reentrant lock
Synchronized block 
Synchronized methods
Atomic classes and atomic methods
volatile

Synchronized block vs Synchronized methods

Thread communication (wait(), notify(), notifyAll())


private int counter;

public int getNextUniqueIndex() {
  return counter++; 
}
It basically reads value from memory, increments it and puts back to memory. This works in single thread but nowadays, in the era of multi-core, multi-CPU, multi-level caches it won't work correctly. First of all it introduces race condition (several threads can read the value at the same time), but also visibility problems. The value might only be stored in "local" CPU memory (some cache) and not be visible for other CPUs/cores (and thus - threads). This is why many refer to local copy of a variable in a thread. It is very unsafe. Consider this popular but broken thread-stopping code:



### To stop a thread in run method

while(!Thread.currentThread().isInterrupted()){
    try{        
        Thread.sleep(10);
    }
    catch(InterruptedException e){
        Thread.currentThread().interrupt();
        break; //optional, since the while loop conditional should detect the interrupted state
    }
    catch(Exception e){
        e.printStackTrace();
    }
