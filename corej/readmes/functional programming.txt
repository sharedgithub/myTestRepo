
functions in java are not methods as methods are bound by classes
JJVM is responsible for interpretting bytecode, security and memory managment

Reflections??? variable shadowing

at runtime, instance of jvm is created and in that instance bytecode is loaded 
jvm also do just in time compilation ..

JIT is part of JVM which compiles the bytecode to machine code for faster execution. 
.which checks which part of code is executed frequently and then cache that code for faster execution

In a compiled implementation, the original program is translated into native machine instructions, which are executed directly by the hardware.

In an interpreted implementation, the original program is translated into something else. Another program, called "the interpreter", then examines "something else" and performs whatever actions are called for. Depending on the language and its implementation, there are a variety of forms of "something else". From more popular to less popular, "something else" might be

Binary instructions for a virtual machine, often called bytecode

in functional programming importance is given to not to change the object which is passed.
in FP object is passed and a new object is returned with some modification

functional interfaces has one abstract method( SINGLE ABSTRACT METHOD INTERFACE)(SAM)



Interface		Input						Output						Purpose

Function		Single Object Type Any		Single Object Type Any		Applying a Logic,Logic Chaining
BiFunction		Two Object Type Any			Single Object Type Any		Applying a Logic,Logic Chaining
Predicate		Single Object Type Any		boolean						Tests if a value conforms to a logic
Consumer		Single Object Type Any		none						using a value output some sideeffect
Supplier		None						Single Object Type Any		Create an object of desired type

Funtinal interface has 4 methods

R apply(T t)  Applies logic to T and retuns an object R
andThen(Function after)  First applies its logic then the logic provided by function after
compose(Function before)  First applies before logic and then its own logic
identity()  Return its own input parameter

and it can have many default and static methods

earlier anonymous classes were used as lambdas
https://stackify.com/streams-guide-java-8/

        Integer[] iarry=new Integer[]{11,2,8,2,5};
       Arrays.stream(iarry).sorted((x,y)->y.compareTo(x)).forEach(System.out::println);
        Integer max=Arrays.stream(iarry).reduce((x,y)->x>y?x:y).orElse(null);
        System.out.println("max " + max);
       Set<String> kk="aslkdfasdfasdfasdf".chars().mapToObj(x->Character.toString(x)).collect(Collectors.toSet());
       Map<String,List<String>> ddkk=
               "aslkdfasdddddddfasdfasdf".chars().mapToObj(x->Character.toString(x)).collect(Collectors.groupingBy(x->x));
